// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum RoleType {
  USER
  MEMBER
  OWNER
}

model Role {
  id String @id @default(uuid()) @db.Char(36)

  role RoleType

  users             User[]
  room_member_roles RoomMember[]

  @@map("roles")
}

model User {
  id String @id @default(uuid()) @db.Char(36)

  name     String
  email    String
  password String
  photo    String

  role_id String
  role    Role   @relation(fields: [role_id], references: [id])

  rooms         Room[]        @relation("UserCreateRelation")
  room_members  RoomMember[]
  room_messages RoomMessage[]

  @@map("users")
}

model Group {
  id String @id @default(uuid()) @db.Char(36)

  name    String
  photo   String
  about   String   @db.Text
  benefit String[]

  room_id String @unique
  room    Room   @relation(fields: [room_id], references: [id])

  created_at DateTime @default(now())

  @@map("groups")
}

model Room {
  id String @id @default(uuid()) @db.Char(36)

  name     String?
  is_group Boolean @default(false)

  created_by      String
  created_by_user User   @relation("UserCreateRelation", fields: [created_by], references: [id])

  created_at DateTime @default(now())

  members RoomMember[]
  message RoomMessage[]

  group Group?

  @@map("rooms")
}

model RoomMember {
  id String @id @default(uuid()) @db.Char(36)

  room_id String
  room    Room   @relation(fields: [room_id], references: [id])

  user_id String
  user    User   @relation(fields: [user_id], references: [id])

  role_id String
  role    Role   @relation(fields: [role_id], references: [id])

  joined_at DateTime @default(now())

  @@map("room_members")
}

enum MessageType {
  TEXT
  IMAGE
}

model RoomMessage {
  id String @id @default(uuid()) @db.Char(36)

  room_id String
  room    Room   @relation(fields: [room_id], references: [id])

  sender_id String
  user      User   @relation(fields: [sender_id], references: [id])

  content String @db.Text

  type MessageType? @default(TEXT)

  created_at DateTime @default(now())

  @@map("room_messages")
}
